@startuml

' STATIC
' Generated by CTP - https://github.com/samuelroland/ctp

' Style
hide empty members
hide circle
skinparam classAttributeIconSize 0

' Additions

' REMOVE

' ENDSTATIC

class AbstractSwordBuilder {
	# sword: Sword
	+ buildGasoline(): Validation
	+ buildFire(): Validation
	+ buildPixieDust(): Validation
	+ getSword(): Sword
}


class GoldenSpear {
	+ cost(): int
	+ name(): String
	+ damage(): int
	+ getModelPath(): String
}

class CharacterStatsPanel {
	- healthLabel: JLabel
	- defenseLabel: JLabel
	- attackLabel: JLabel
	+ updateStats(character: Character): void
	+ reinitializeStats(): void
	- createStatPanel(icon: ImageIcon, label: JLabel): JPanel
	- createLabel(): JLabel
}


class Vector {
	- posX: int
	- posY: int
	+ getPosX(): int
	+ setPosX(posX: int): void
	+ getPosY(): int
	+ setPosY(posY: int): void
}


class Utils {
	- {static} random: Random
	+ {static} getNext(list: List<T>, currentItem: T): T
	+ {static} getPrevious(list: List<T>, currentItem: T): T
	+ {static} getRandomItem(list: List<T>): T
	+ {static} getImageIcon(path: String): ImageIcon
	+ {static} getPanelBorder(title: String): Border
	+ {static} scaleImageIcon(icon: ImageIcon, scale: double): ImageIcon
	+ {static} resizeIcon(icon: ImageIcon, height: int): ImageIcon
	+ {static} getRandom(): Random
}


class IronHelmet {
	+ cost(): int
	+ name(): String
	+ resistance(): int
	+ getModelPath(): String
}

abstract class Character {
	- health: int
	- chainMail: boolean
	- armor: Armor
	- helmet: Helmet
	- weapon: Weapon
	+ setHealth(health: int): void
	+ setChainMail(chainMail: boolean): void
	+ setArmor(armor: Armor): void
	+ setHelmet(helmet: Helmet): void
	+ setWeapon(weapon: Weapon): void
	+ hasChainMail(): boolean
	+ hasArmor(): boolean
	+ hasHelmet(): boolean
	+ hasWeapon(): boolean
	+ {abstract}attackMultiplier(): double
	+ {abstract}resistanceMultiplier(): double
	+ getDefense(): double
	+ getAttack(): double
	+ getHealth(): int
	+ getHeight(): int
	+ getWeapon(): Weapon
	- {static} calculateDamage(attack: double, defence: double): double
	+ attack(character: Character): void
	+ isAlive(): boolean
	+ generateInitialPos(side: Side): void
	+ changeWeaponPosition(): void
	+ setPosX(x: int): void
	+ setPosY(y: int): void
	+ getBodyPath(): String
	+ getHeadPath(): String
	+ {abstract}getHeadPosX(): int
	+ {abstract}getHeadPosY(): int
	+ {abstract}getSpawnMin(): int
	+ {abstract}getSpawnMax(): int
	+ {abstract}getMaxHealth(): int
}


class GoldenHelmet {
	+ cost(): int
	+ name(): String
	+ resistance(): int
	+ getModelPath(): String
}

class HumanBuilder {
	+ buildChainMail(): Validation
	+ buildArmor(armor: Armor): Validation
	+ buildHelmet(helmet: Helmet): Validation
	+ buildWeapon(weapon: Weapon): Validation
	+ newCharacter(): void
}

class WoodenSword {
	+ baseCost(): int
	+ name(): String
	+ baseDamage(): int
	+ getModelPath(): String
}

enum CharacterType {
	+ ELF:
	+ HUMAN:
	+ ORC:
	- name: String
	- builder: AbstractCharacterBuilder
	- weapons: List<Weapon>
	- helmets: List<Helmet>
	- armors: List<Armor>
	+ getName(): String
	+ getCharacterBuilder(): AbstractCharacterBuilder
	+ getCharacterWeapons(): List<Weapon>
	+ getCharacterHelmets(): List<Helmet>
	+ getCharacterArmors(): List<Armor>
}


class GameController {
	+ {static} TEAM_BUDGET: int
	- player: Team
	- enemy: Team
	- battleRunning: Boolean
	- displayer: Displayer
	- playerBudget: int
	- {static} instance: GameController
	+ {static} getInstance(): GameController
	+ run(): void
	+ getPlayerBudget(): int
	+ setPlayerBudget(value: int): void
	+ battleRunning(): Boolean
	+ startBattle(): Team
	+ addPlayerTeamMember(character: Character): void
	+ {static} main(args: String[]): void
	+ generateEnemyTeam(): void
	- generateRandomCharacter(): Character
}


class JeweledBow {
	+ cost(): int
	+ name(): String
	+ damage(): int
	+ getModelPath(): String
}

abstract class Spear {
	- {static} SPEARS: List<Spear>
	+ {static} getSpears(): List<Spear>
	+ range(): int
	+ isModifiable(): boolean
}


abstract class Helmet {
	- {static} HELMETS: List<Helmet>
	+ {static} getHelmets(): List<Helmet>
}


class Validation {
	- state: boolean
	- error: String
	+ {static} valid(): Validation
	+ {static} invalid(error: String): Validation
	+ getState(): boolean
	+ getErrorMessage(): String
}


class IronSword {
	+ baseCost(): int
	+ name(): String
	+ baseDamage(): int
	+ getModelPath(): String
}

class Constants {
	+ {static} PANEL_HEIGHT: int
	+ {static} PANEL_WIDTH: int
	+ {static} BACKGROUND_IMAGE_PATH: String
	+ {static} BUTTON_WIDTH: int
	+ {static} BUTTON_HEIGHT: int
	+ {static} DISTANCE_BUTTON_FROM_TOP: int
	+ {static} DISTANCE_BUILDER_BUTTON_FROM_RIGHT: int
	+ {static} DISTANCE_ADD_BUTTON_FROM_RIGHT: int
	+ {static} MELEE_WEAPON_HIT_DISTANCE: int
	+ {static} MELEE_WEAPON_ANIMATION_TIME: int
	+ {static} CHAR_BODY_WIDTH: int
	+ {static} CHAR_BODY_HEIGHT: int
	+ {static} CHAR_HEAD_WIDTH: int
	+ {static} CHAR_HEAD_HEIGHT: int
	+ {static} CHAR_HP_LABEL_WIDTH: int
	+ {static} CHAR_HP_LABEL_HEIGHT: int
	+ {static} CHAR_HP_LABEL_OFFSET_X: int
	+ {static} CHAR_HP_LABEL_OFFSET_Y: int
	+ {static} WALK_SPEED: int
	+ {static} ARROW_SPEED: int
	+ {static} CHAIN_MAIL_DEFENSE: double
	+ {static} WEAPON_OFFSET_Y: int
	+ {static} WEAPON_LEFT_OFFSET_X: int
	+ {static} WEAPON_RIGHT_OFFSET_X: int
	+ {static} CHARACTER_BASE_BODY_PATH: String
	+ {static} CHARACTER_BASE_HEAD_PATH: String
	+ {static} CHARACTER_BASE_WEAPON_PATH: String
	+ {static} ELF_HEAD_POS_X_OFFSET_RIGHT: int
	+ {static} ELF_HEAD_POS_Y_OFFSET: int
	+ {static} HUMAN_HEAD_POS_X_OFFSET_RIGHT: int
	+ {static} HUMAN_HEAD_POS_X_OFFSET_LEFT: int
	+ {static} HUMAN_HEAD_POS_Y_OFFSET: int
	+ {static} ORC_HEAD_POS_X_OFFSET_RIGHT: int
	+ {static} ORC_HEAD_POS_X_OFFSET_LEFT: int
	+ {static} ORC_HEAD_POS_Y_OFFSET: int
}

class BasicBow {
	+ cost(): int
	+ name(): String
	+ damage(): int
	+ getModelPath(): String
}

class SwordStatsPanel {
	- attackLabel: JLabel
	+ updateStats(sword: Sword): void
	- createStatPanel(icon: ImageIcon, label: JLabel): JPanel
	- createLabel(): JLabel
}


class IronSpear {
	+ cost(): int
	+ name(): String
	+ damage(): int
	+ getModelPath(): String
}

class Team {
	- members: List<Character>
	- name: String
	- side: Side
	+ getName(): String
	+ getMembers(): List<Character>
	+ clear(): void
	+ isEmpty(): boolean
	+ removeMember(member: Character): void
	+ addMember(member: Character): void
}


class IconButton {
}
class EntityDisplay {
	- {static} instance: EntityDisplay
	- panel: JPanel
	- characterLabels: Map<Character,JLabel[]>
	+ {static} getInstance(): EntityDisplay
	+ setPanel(panel: JPanel): void
	+ displayCharacter(character: Character): void
	+ createLabel(entity: Entity, icon: ImageIcon, posX: int, posY: int): JLabel
	- displayBody(character: Character): void
	- displayWeapon(character: Character): void
	- displayHead(character: Character): void
	- displayHpLabel(character: Character): void
	+ displayArmy(team: Team): void
	+ clearArmy(team: Team): void
	+ removeCharacter(character: Character): void
	- addLabelToCharacter(character: Character, label: JLabel): void
}


enum Side {
	+ LEFT:
	+ RIGHT:
	- elfBeg: int
	- elfEnd: int
	- humanBeg: int
	- humanEnd: int
	- orcBeg: int
	- orcEnd: int
	+ getElfBeg(): int
	+ getElfEnd(): int
	+ getHumanBeg(): int
	+ getHumanEnd(): int
	+ getOrcBeg(): int
	+ getOrcEnd(): int
}


class Battle {
	- teams: List<Team>
	- rand: Random
	- turn: int
	- displayer: Displayer
	- charactersExcludingTeam(toExclude: Team): List<Character>
	- randomCharacter(characters: List<Character>): Character
	- findTeamOfCharacter(character: Character): Team
	- changeTurn(): void
	+ nextAssault(): void
	+ getEmptyTeam(): Team
}


abstract class ItemEntity {
	+ {abstract}getModelPath(): String
}

abstract class Armor {
	- {static} ARMORS: List<Armor>
	+ {static} getArmors(): List<Armor>
}


class IronArmor {
	+ cost(): int
	+ name(): String
	+ resistance(): int
	+ getModelPath(): String
}

abstract class Weapon {
	+ {static} getWeapons(): List<Weapon>
	+ {abstract}cost(): int
	+ {abstract}name(): String
	+ {abstract}damage(): int
	+ {abstract}range(): int
	+ {abstract}isDistance(): boolean
	+ {abstract}isModifiable(): boolean
	+ getWeaponWidth(): int
	+ clone(): Weapon
}

class ItemStatPanel {
	- iconLabel: JLabel
	- feature1: JLabel
	- feature2: JLabel
	- feature1Name: String
	- feature2Name: String
	- {static} MAX_IMAGE_SIZE: int
	- {static} LABEL_WIDTH: int
	- {static} LABEL_HEIGHT: int
	- setFixedSize(label: JLabel): void
	- setIconLabel(icon: ImageIcon): void
	+ updatePanel(icon: ImageIcon, feature1Value: int, feature2Value: int): void
}


class ForestBow {
	+ cost(): int
	+ name(): String
	+ damage(): int
	+ getModelPath(): String
}

class BackgroundPanel {
	- backgroundImage: Image
	# paintComponent(g: Graphics): void
}


class Displayer {
	- panel: BackgroundPanel
	- team1: Team
	- startButton: JButton
	- buildTeamButton: JButton
	- builderChar: CharacterBuilderFrame
	- entityDisplay: EntityDisplay
	+ setFirstTeam(team: Team): void
	+ setSecondTeam(team: Team): void
	+ startDisplay(firstTeam: Team, secondTeam: Team): void
	- displayCharacterBuilderPanel(): void
	+ addBuilderButton(): void
	+ addStartBattleButton(): void
	+ redraw(): void
	+ moveEntity(entity: Entity, destination: Vector, speed: int): void
	+ displayMoveCharacter(character: Character, destination: Vector, speed: int, \n\t distanceToTargetVector: int): void
	+ displayMeleeAttack(weapon: Weapon): void
	+ displayBowAttack(c1: Character, c2: Character, speed: int): void
	+ enableButtons(): void
	+ disableButtons(): void
	+ displayDeath(c: Character): void
}


class Displayer$ImageUtils {
	+ {static} flipImageHorizontally(image: BufferedImage): BufferedImage
	+ {static} toBufferedImage(icon: ImageIcon): BufferedImage
}

class CharacterBuilderFrame {
	- {static} SCREEN_WIDTH: int
	- {static} SCREEN_HEIGHT: int
	- mainFrame: CharacterBuilderFrame
	- builder: AbstractCharacterBuilder
	- displayer: CharacterDisplayer
	- characterStatsPanel: CharacterStatsPanel
	- currentArmorsList: List<Armor>
	- currentHelmetsList: List<Helmet>
	- currentWeaponsList: List<Weapon>
	- currentBalance: int
	- currentCharacterType: CharacterType
	- currentChainMail: boolean
	- currentArmor: Armor
	- currentHelmet: Helmet
	- currentWeapon: Weapon
	- balanceLabel: JLabel
	- characterTypeSelection: SelectionRowPanel
	- chainMailSelection: SelectionRowPanel
	- armorSelection: SelectionRowPanel
	- helmetSelection: SelectionRowPanel
	- weaponSelection: SelectionRowPanel
	- weaponStatsPanel: ItemStatPanel
	- helmetStatsPanel: ItemStatPanel
	- armorStatsPanel: ItemStatPanel
	- updateCharacterTypeDisplay(): void
	- updateChainmailDisplay(): void
	- updateArmorDisplay(): void
	- updateHelmetDisplay(): void
	- updateAllSelectionsDisplay(): void
	- updateWeaponDisplay(): void
	- updateBalanceDisplay(): void
	- getNextCharacterType(): CharacterType
	- getPreviousCharacterType(): CharacterType
	- reinitializeItemsLists(): void
	- enableAllSelections(): void
	- selectRandomCharacterType(): void
	- selectRandomItems(): void
	- getAffordableWeapon(): Weapon
	- updateBalance(cost: int): void
}


class Human {
	- {static} HUMAN_HEALTH: int
	+ attackMultiplier(): double
	+ resistanceMultiplier(): double
	+ getMaxHealth(): int
	+ getHeadPosX(): int
	+ getHeadPosY(): int
	+ getSpawnMin(): int
	+ getSpawnMax(): int
}


abstract class Item {
	- position: Vector
	+ pathName(): String
	+ {abstract}cost(): int
	+ {abstract}name(): String
	+ toString(): String
	+ getPosition(): Vector
	+ setPosition(v: Vector): void
}


class BronzeHelmet {
	+ cost(): int
	+ name(): String
	+ resistance(): int
	+ getModelPath(): String
}

abstract class DistanceWeapon {
	+ {static} getDistanceWeapons(): List<DistanceWeapon>
	+ isDistance(): boolean
}

class MagicSwordBuilder {
	+ buildGasoline(): Validation
	+ buildFire(): Validation
	+ buildPixieDust(): Validation
}

abstract class Bow {
	- {static} BOWS: List<Bow>
	- arrow: Arrow
	+ {static} getBows(): List<Bow>
	+ range(): int
	+ isModifiable(): boolean
	+ getArrow(): Arrow
	+ setArrow(a: Arrow): void
}


class SelectionRowPanel {
	- leftButton: IconButton
	- label: JLabel
	- rightButton: IconButton
	- validateButton: IconButton
	+ updateLabel(labelValue: String): void
	+ disableRow(): void
	+ enableRow(): void
}


class CharacterDisplayer {
	- character: Character
	- {static} PANEL_WIDTH: int
	- {static} PANEL_HEIGHT: int
	- setFixedSize(width: int, height: int): void
	+ setCharacter(character: Character): void
	+ setWeaponPosition(): void
	- displayPart(imagePath: String, posX: int, posY: int): void
	- displayPart(imagePath: String, posX: int, posY: int, width: int, height: int): void
	+ displayBody(): void
	+ displayHead(): void
	+ displayWeapon(): void
	- createLabel(entity: Entity, icon: ImageIcon, posX: int, posY: int): JLabel
	+ displayCharacter(): void
	+ clearDisplay(): void
	- refreshDisplay(): void
}


class FitIconButton {
	- setButtonSize(icon: ImageIcon): void
}

abstract class Sword {
	- gasoline: boolean
	- fire: boolean
	- pixieDust: boolean
	- {static} SWORDS: List<Sword>
	+ setGasoline(gasoline: boolean): void
	+ setFire(fire: boolean): void
	+ setPixieDust(pixieDust: boolean): void
	+ hasGasoline(): boolean
	+ hasFire(): boolean
	+ hasPixieDust(): boolean
	+ {static} getSwords(): List<Sword>
	+ range(): int
	+ isModifiable(): boolean
	+ gasolineCost(): int
	+ fireCost(): int
	+ pixieDustCost(): int
	+ gasolineBoost(): int
	+ fireBoost(): int
	+ pixieDustBoost(): int
	+ damage(): int
	+ cost(): int
	+ {abstract}baseCost(): int
	# {abstract}baseDamage(): int
	+ reset(): void
	+ pathName(): String
}


enum SwordType {
	+ STANDARD:
	+ MAGIC:
	- name: String
	+ getName(): String
	+ {abstract}createBuilder(sword: Sword): AbstractSwordBuilder
}


class NormalSwordBuilder {
	+ buildGasoline(): Validation
	+ buildFire(): Validation
}

class SwordBuilderDialog {
	- {static} SCREEN_WIDTH: int
	- {static} SCREEN_HEIGHT: int
	- mainFrame: SwordBuilderDialog
	- builder: AbstractSwordBuilder
	- displayer: JLabel
	- gasolineStatsPanel: ItemStatPanel
	- fireStatsPanel: ItemStatPanel
	- PixieDustStatsPanel: ItemStatPanel
	- swordStatsPanel: SwordStatsPanel
	~ balanceLabel: JLabel
	- swordTypeSelection: SelectionRowPanel
	- gasolineSelection: SelectionRowPanel
	- fireSelection: SelectionRowPanel
	- PixieDustSelection: SelectionRowPanel
	- currentBalance: int
	- currentSwordType: SwordType
	- currentGasoline: boolean
	- currentFire: boolean
	- currentPixieDust: boolean
	- updateBalance(cost: int): void
	- getNextSwordType(currentType: SwordType): SwordType
	- getPreviousSwordType(currentType: SwordType): SwordType
	- updatePreview(): void
	- initializeItemStats(): void
}


class GoldenArmor {
	+ cost(): int
	+ name(): String
	+ resistance(): int
	+ getModelPath(): String
}

class ElfBuilder {
	+ buildArmor(armor: Armor): Validation
	+ buildHelmet(helmet: Helmet): Validation
	+ buildWeapon(weapon: Weapon): Validation
	+ newCharacter(): void
}

class GoldenSword {
	+ baseCost(): int
	+ name(): String
	+ baseDamage(): int
	+ getModelPath(): String
}

class BronzeArmor {
	+ cost(): int
	+ name(): String
	+ resistance(): int
	+ getModelPath(): String
}

abstract class AbstractCharacterBuilder {
	# character: Character
	+ buildChainMail(): Validation
	+ buildArmor(armor: Armor): Validation
	+ buildHelmet(helmet: Helmet): Validation
	+ buildWeapon(weapon: Weapon): Validation
	+ getCharacter(): Character
	+ {abstract}newCharacter(): void
}


class Orc {
	- {static} ORC_HEALTH: int
	+ attackMultiplier(): double
	+ resistanceMultiplier(): double
	+ getMaxHealth(): int
	+ getHeadPosX(): int
	+ getHeadPosY(): int
	+ getSpawnMin(): int
	+ getSpawnMax(): int
}


abstract class ResistanceItem {
	+ {abstract}resistance(): int
}

abstract class CloseCombatWeapon {
	+ {static} getCloseCombatWeapons(): List<CloseCombatWeapon>
	+ isDistance(): boolean
}

abstract class Entity {
	# position: Vector
	# side: Side
	+ getPosX(): int
	+ getPosY(): int
	+ getSide(): Side
	+ setPosX(x: int): void
	+ setPosY(y: int): void
	+ getPosition(): Vector
	+ setPosition(v: Vector): void
}


class OrcBuilder {
	+ buildChainMail(): Validation
	+ buildArmor(armor: Armor): Validation
	+ buildHelmet(helmet: Helmet): Validation
	+ buildWeapon(weapon: Weapon): Validation
	+ newCharacter(): void
}

class Elf {
	- {static} ELF_HEALTH: int
	+ attackMultiplier(): double
	+ resistanceMultiplier(): double
	+ getMaxHealth(): int
	+ getHeadPosX(): int
	+ getHeadPosY(): int
	+ getSpawnMin(): int
	+ getSpawnMax(): int
}


class Arrow {
	+ getModelPath(): String
}

class WoodenSpear {
	+ cost(): int
	+ name(): String
	+ damage(): int
	+ getModelPath(): String
}



Spear <|-- GoldenSpear
JPanel <|-- CharacterStatsPanel
Helmet <|-- IronHelmet
Entity <|-- Character
Helmet <|-- GoldenHelmet
AbstractCharacterBuilder <|-- HumanBuilder
Sword <|-- WoodenSword
Bow <|-- JeweledBow
CloseCombatWeapon <|-- Spear
ResistanceItem <|-- Helmet
Sword <|-- IronSword
Bow <|-- BasicBow
JPanel <|-- SwordStatsPanel
Spear <|-- IronSpear
JButton <|-- IconButton
Entity <|-- ItemEntity
ResistanceItem <|-- Armor
Armor <|-- IronArmor
Cloneable <|.. Weapon
Item <|-- Weapon
JPanel <|-- ItemStatPanel
Bow <|-- ForestBow
JPanel <|-- BackgroundPanel
Displayer +-- Displayer$ImageUtils
JFrame <|-- CharacterBuilderFrame
Character <|-- Human
ItemEntity <|-- Item
Helmet <|-- BronzeHelmet
Weapon <|-- DistanceWeapon
AbstractSwordBuilder <|-- MagicSwordBuilder
DistanceWeapon <|-- Bow
JPanel <|-- SelectionRowPanel
JPanel <|-- CharacterDisplayer
JButton <|-- FitIconButton
CloseCombatWeapon <|-- Sword
AbstractSwordBuilder <|-- NormalSwordBuilder
JDialog <|-- SwordBuilderDialog
Armor <|-- GoldenArmor
AbstractCharacterBuilder <|-- ElfBuilder
Sword <|-- GoldenSword
Armor <|-- BronzeArmor
Character <|-- Orc
Item <|-- ResistanceItem
Weapon <|-- CloseCombatWeapon
AbstractCharacterBuilder <|-- OrcBuilder
Character <|-- Elf
ItemEntity <|-- Arrow
Spear <|-- WoodenSpear


Team "0..1" -- "*" Character
Team "1" <-- "1" Side

GameController "*" -- "1" Team: player
GameController "*" -- "1" Team: enemy
GameController "*" --> "1" Displayer: displayer
GameController "1" --> "0..1" GameController: instance

EntityDisplay "1" -- "1" EntityDisplay

Entity "*" -->  "1" Vector: position
Entity "*" --> "1" Side: side

Displayer "*" -- "1" Team: team1
Displayer "*" -- "1" Team: team2
Displayer "*" --> "1" CharacterBuilderFrame
Displayer "*" --> "1" EntityDisplay

CharacterType "*" --> "1" AbstractCharacterBuilder: builder
CharacterType "*" --> "*" Weapon: weapons
CharacterType "*" --> "*" Helmet: helmets
CharacterType "*" --> "*" Armor: armors

Battle "1" --> "0..*" Team: teams
Battle "*" --> "1" Displayer: displayer

AbstractSwordBuilder -- Sword : builds
Bow -- Arrow : has

Character "0..1"-- "0..1" Armor : has
Character "0..1" -- "0..1" Helmet : has
Character "0..1" -- "0..1" Weapon : has

CharacterDisplayer -- Character : has

CharacterBuilderFrame -- CharacterDisplayer : has
CharacterBuilderFrame "*" --> "1" AbstractCharacterBuilder: builder
    CharacterBuilderFrame -- CharacterStatsPanel : has
    CharacterBuilderFrame -- "*" Armor : has
    CharacterBuilderFrame -- "*" Helmet : has
    CharacterBuilderFrame -- "*" Weapon : has
    CharacterBuilderFrame -- CharacterType : currentCharacterType
    CharacterBuilderFrame -- Armor : currentArmor
    CharacterBuilderFrame -- Helmet : currentHelmet
    CharacterBuilderFrame -- Weapon : currentWeapon
    CharacterBuilderFrame "*" -- "5" SelectionRowPanel : has
    CharacterBuilderFrame "*" -- "3" ItemStatPanel : has

    SwordBuilderDialog "*" -- "4" SelectionRowPanel : has
    SwordBuilderDialog "*" -- "3" ItemStatPanel : has

    SwordBuilderDialog "1" -- "1" SwordBuilderDialog
    SwordBuilderDialog "*" -- "1" AbstractSwordBuilder : builder
    SwordBuilderDialog "*" -- "1" SwordType: currentSwordType

    AbstractCharacterBuilder "*" -- "1" Character

@enduml
